import numpy as np
import xarray as xr
import dask.array as da
from scipy.spatial import KDTree
from dask import delayed, compute

class Regridder:
    """
    A class to perform regridding of data from a source grid to a target grid.

    Attributes:
    -----------
    source_grid : xarray.Dataset
        The source grid containing 'lon' and 'lat' coordinates.
    target_grid : xarray.Dataset
        The target grid containing 'lon' and 'lat' coordinates.
    method : str
        The interpolation method to use ('linear' by default).
    esmf_weights_file : str, optional
        Path to an ESMF weights file for regridding.

    Methods:
    --------
    _get_grid_points(grid):
        Extracts and flattens the grid coordinates.
    _compute_weights():
        Computes the regridding weights using KDTree or loads from ESMF file.
    _regrid_dataarray(data):
        Regrids a DataArray using the computed weights.
    regrid(data):
        Regrids a DataArray or Dataset.
    save_weights(filename):
        Saves the computed weights to a NetCDF file.
    load_weights(filename):
        Loads the weights from a NetCDF file.
    get_weights():
        Returns the computed weights.
    """

    def __init__(self, source_grid, target_grid, method='linear', esmf_weights_file=None):
        """
        Initializes the Regridder with source and target grids, interpolation method, and optional ESMF weights file.

        Parameters:
        -----------
        source_grid : xarray.Dataset
            The source grid containing 'lon' and 'lat' coordinates.
        target_grid : xarray.Dataset
            The target grid containing 'lon' and 'lat' coordinates.
        method : str
            The interpolation method to use ('linear' by default).
        esmf_weights_file : str, optional
            Path to an ESMF weights file for regridding.
        """
        self.source_grid = source_grid
        self.target_grid = target_grid
        self.method = method
        self.esmf_weights_file = esmf_weights_file
        self.weights = None

    def _get_grid_points(self, grid):
        """
        Extracts and flattens the grid coordinates.

        Parameters:
        -----------
        grid : xarray.Dataset
            The grid containing 'lon' and 'lat' coordinates.

        Returns:
        --------
        np.ndarray
            Flattened array of grid points.
        """
        lon = grid['lon'].values
        lat = grid['lat'].values
        return np.array([lon.flatten(), lat.flatten()]).T

    def _compute_weights(self):
        """
        Computes the regridding weights using KDTree or loads from ESMF file.
        """
        if self.esmf_weights_file:
            self.weights = xr.open_dataset(self.esmf_weights_file)
        else:
            source_points = self._get_grid_points(self.source_grid)
            target_points = self._get_grid_points(self.target_grid)
            
            # Parallelize KDTree generation
            tree = delayed(KDTree)(source_points)
            tree, = compute(tree)
            
            # Use existing chunking or rechunk if necessary
            if isinstance(self.target_grid['lon'].data, da.Array):
                target_chunks = self.target_grid['lon'].data.chunks
            else:
                target_chunks = (len(target_points) // 10, 2)  # Example: split into 10 chunks
            
            # Parallelize querying the KDTree
            target_chunks = da.from_array(target_points, chunks=target_chunks)
            indices = target_chunks.map_blocks(lambda chunk: tree.query(chunk)[1], dtype=int).compute()
            
            self.weights = xr.DataArray(indices, coords=self.target_grid.coords, dims=self.target_grid.dims)

    def _regrid_dataarray(self, data):
        """
        Regrids a DataArray using the computed weights.

        Parameters:
        -----------
        data : xarray.DataArray
            The data to be regridded.

        Returns:
        --------
        xarray.DataArray
            The regridded data.
        """
        if self.weights is None:
            self._compute_weights()
        
        def regrid_chunk(chunk):
            data_flat = chunk.flatten()
            regridded_chunk = data_flat[self.weights.values.flatten()]
            return regridded_chunk.reshape(self.target_grid['lon'].shape)
        
        regridded_data = da.map_blocks(regrid_chunk, data.data, dtype=data.dtype)
        regridded_da = xr.DataArray(regridded_data, coords=self.target_grid.coords, dims=self.target_grid.dims)
        
        # Copy attributes from the original data
        regridded_da.attrs = data.attrs
        
        return regridded_da

    def regrid(self, data):
        """
        Regrids a DataArray or Dataset.

        Parameters:
        -----------
        data : xarray.DataArray or xarray.Dataset
            The data to be regridded.

        Returns:
        --------
        xarray.DataArray or xarray.Dataset
            The regridded data.
        """
        if isinstance(data, xr.DataArray):
            return self._regrid_dataarray(data)
        elif isinstance(data, xr.Dataset):
            regridded_vars = {var: self._regrid_dataarray(data[var]) for var in data.data_vars}
            regridded_ds = xr.Dataset(regridded_vars, coords=self.target_grid.coords)
            
            # Copy attributes from the original dataset
            regridded_ds.attrs = data.attrs
            
            return regridded_ds
        else:
            raise TypeError("Input data must be an xarray DataArray or Dataset")

    def save_weights(self, filename):
        """
        Saves the computed weights to a NetCDF file.

        Parameters:
        -----------
        filename : str
            The file path to save the weights.
        """
        self.weights.to_netcdf(filename)

    def load_weights(self, filename):
        """
        Loads the weights from a NetCDF file.

        Parameters:
        -----------
        filename : str
            The file path to load the weights from.
        """
        self.weights = xr.open_dataarray(filename)

    def get_weights(self):
        """
        Returns the computed weights.

        Returns:
        --------
        xarray.DataArray
            The computed weights.
        """
        if self.weights is None:
            self._compute_weights()
        return self.weights

# Example usage
source_grid = xr.Dataset({'lon': (['y', 'x'], np.random.rand(10, 10)),
                          'lat': (['y', 'x'], np.random.rand(10, 10))})
target_grid = xr.Dataset({'lon': (['y', 'x'], np.linspace(0, 1, 20).reshape(4, 5)),
                          'lat': (['y', 'x'], np.linspace(0, 1, 20).reshape(4, 5))})
data = xr.DataArray(np.random.rand(10, 10), dims=['y', 'x'], attrs={'units': 'K', 'description': 'Sample data'})

regridder = Regridder(source_grid, target_grid, esmf_weights_file='path_to_esmf_weights.nc')
regridded_data = regridder.regrid(data)
print(regridded_data)

# Save weights
regridder.save_weights('regridding_weights.nc')

# Load weights
regridder.load_weights('regridding_weights.nc')

# Get weights
weights = regridder.get_weights()
print(weights)
